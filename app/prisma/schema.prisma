// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permission {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  guardName String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  roles Role[]

  modelHasPermissions ModelHasPermission[]
  roleHasPermissions  RoleHasPermission[]
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  guardName String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  permissions        Permission[]
  modelHasRoles      ModelHasRole[]
  roleHasPermissions RoleHasPermission[]
}

model RoleHasPermission {
  id           Int        @id @default(autoincrement())
  permissionId Int
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])
}

model ModelHasPermission {
  id           Int    @id @default(autoincrement())
  permissionId Int
  modelType    String
  modelId      Int

  permission Permission @relation(fields: [permissionId], references: [id])
}

model ModelHasRole {
  id        Int    @id @default(autoincrement())
  roleId    Int
  modelType String
  modelId   Int

  role Role @relation(fields: [roleId], references: [id])
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]
  profile       Profile?

  workspaces Workspace[] // New field for the user's workspaces
  teamMember TeamMember[]

  availabilityStatus String?
  agentActiveTask AgentActiveTask[]
  agentActivityTimerLog AgentActivityTimerLog[]

  @@map(name: "users")
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Workspace {
  id    Int     @id @default(autoincrement())
  name  String
  about String? // Field to store the workspace about or additional information

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  isDraft  Boolean   @default(true) // New field to indicate if the workspace is a draft
  teams    Team[] // New field for the teams within the workspace
  channels Channel[] // New field for the channels within the workspace

  subscription Json?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  Thread    Thread[]
  agentActiveTask     AgentActiveTask[]

  @@map(name: "workspaces")
}

model Subscription {
  id       Int       @id @default(autoincrement())
  name     String
  plan     Json? // Nullable JSON field for the subscription plan
  payments Payment[]

  @@map(name: "subscriptions")
}

model Payment {
  id               Int          @id @default(autoincrement())
  amount           Float
  method           String
  paymentConfirmed Boolean      @default(false)
  createdAt        DateTime     @default(now())
  subscription     Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId   Int          @map("subscription_id")

  @@map(name: "payments")
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String
  workspaceId Int          @map("workspace_id")
  workspace   Workspace    @relation(fields: [workspaceId], references: [id])
  members     TeamMember[] // New field for the members within the team

  @@map(name: "teams")
}

model TeamMember {
  id     Int    @id @default(autoincrement())
  teamId Int    @map("team_id")
  userId Int    @map("user_id")
  user   User   @relation(fields: [userId], references: [id])
  team   Team   @relation(fields: [teamId], references: [id])
  role   String @default("guest-user")

  @@map(name: "team_members")
}

model Channel {
  id          Int         @id @default(autoincrement())
  workspaceId Int         @map("workspace_id")
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  channelId   String      @unique
  channelName String
  channelType ChannelType
  isConnected Boolean     @default(false)
  channelData Json?       @map("channel_data")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  Thread    Thread[]

  @@map(name: "channels")
}

enum ChannelType {
  telegram
  messenger
  instagram_messenger
  instagram_account
  whatsapp
  fb_page
  fb_group
  youtube
  other
}

model Thread {
  id             Int        @id @default(autoincrement())
  workspaceId    Int?
  workspace      Workspace? @relation(fields: [workspaceId], references: [id])
  channelId      Int?
  channel        Channel?   @relation(fields: [channelId], references: [id])
  conversationId String?
  messageId      String?
  title          String
  content        String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  author         Json?      @map("author")
  isClosed       Boolean    @default(false)
  isPublished    Boolean    @default(false)

  @@map(name: "threads")
}

model Tag {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  taggable Taggable[]
}

model Taggable {
  id           Int    @id @default(autoincrement())
  tagId        Int    @map("tagId")
  tag          Tag    @relation(fields: [tagId], references: [id])
  taggableId   String
  taggableType String
}

model AgentActiveTask {
  id          Int       @id @default(autoincrement())
  agentId     Int       @map("agent_id")
  taskDocId   String    @map("task_doc_id")
  workspaceId Int       @map("workspace_id")
  startAt     DateTime  @map("start_at")
  endAt       DateTime? @map("end_at")
  duration    Int       @map("duration")

  status TaskStatus

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  agent     User      @relation(fields: [agentId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])
}

model AgentActivityTimerLog {
  timerId   String    @id @map("timer_id")
  timerType TimerType @map("timer_type")
  agentId   Int       @map("agent_id")
  taskDocId String    @map("task_doc_id")
  startAt   DateTime  @map("start_at")
  endAt     DateTime? @map("end_at")
  duration  Int       @map("duration")

  status TimerStatus

  agent User @relation(fields: [agentId], references: [id])
}

enum TaskStatus {
  start
  pause
  stop
}

enum TimerType {
  pauseTime
  workTime
  breakTime
  leaveTime
  others
}

enum TimerStatus {
  start
  pause
  stop
}