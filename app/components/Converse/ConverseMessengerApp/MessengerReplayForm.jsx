import MessengerChatCommandPallet from "@/components/Converse/ConverseMessengerApp/MessengerChatCommandPallet";
import {
	useCreateConversationMessageMutation, useGetConversationByIdQuery,
} from "@/store/features/messenger/MessengerAPISlice";
import collect from 'collect.js';
import { useSession } from "next-auth/react";
import {useEffect, useState} from 'react';
import { MdSend } from "react-icons/md";
import {useDispatch, useSelector} from "react-redux";
import {activateChatCommand} from "@/store/features/messenger/MessengerInstanceSlice";
import {generateTimestamp} from "@/utils/helperFunctions";
import classNames from "@/utils/classNames";
import AlertError from "@/components/ui/alerts/AlertError";
import {PaperClipIcon} from "@heroicons/react/20/solid";
import useAuthUserSlice from "@/hooks/useAuthUserSlice";
import AutoGrowTextarea from "@/components/ui/forms/AutoGrowTextarea";

const assignees = [
	{ name: 'Unassigned', value: null },
	{
		name: 'Wade Cooper',
		value: 'wade-cooper',
		avatar:
			'https://images.unsplash.com/photo-1491528323818-fdd1faba62cc?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80',
	},
]
const labels = [
	{ name: 'Unlabelled', value: null },
	{ name: 'Engineering', value: 'engineering' },
]
const dueDates = [
	{ name: 'No due date', value: null },
	{ name: 'Today', value: 'today' },
]

export default function MessengerReplayForm() {
	const chatWindowData = useSelector(state => state.messengerInstance.chat_window.data)
	const {isQCManager, isAgent, isAdmin, isSupervisor} = useAuthUserSlice()

	const isOnlyQCManager = isQCManager && !isAdmin && !isSupervisor && !isAgent

	const dispatch = useDispatch()
	const session = useSession()
	const sessionData = session?.data

	const [fromParticipant, setFromParticipant] = useState(null)
	const [toParticipant, setToParticipant] = useState(null)
	const [messageText, setMessageText] = useState('')
	const [messageType, setMessageType] = useState('text')

	const [assigned, setAssigned] = useState(assignees[0])
	const [labelled, setLabelled] = useState(labels[0])
	const [dated, setDated] = useState(dueDates[0])


	const {
		workspaceId,
		channelId,
		conversationId,
		activeThreadId,
		activityTab,
		userActivityType,
		threadIsClosed
	} = chatWindowData


	const {
		data: conversationData,
	} = useGetConversationByIdQuery({
		workspaceId,
		channelId,
		conversationId
	}, { skip: !workspaceId || !channelId || !conversationId })

	const [createConversationMessage, {
		isLoading: conversationMessageIsCreating,
		isSuccess: conversationMessageIsCreated
	}] = useCreateConversationMessageMutation()

	useEffect(() => {
		const chatCommandIsActive = messageText?.length > 0 && messageText.startsWith('/')
		if(chatCommandIsActive){
			dispatch(activateChatCommand())
		}
	}, [messageText])

	useEffect(() => {
		if(sessionData?.user){
			setFromParticipant({
				id: sessionData.user.id,
				name: sessionData.user.name,
				role: 'agent',
			})
		}else{
			setFromParticipant(null)
		}
	}, [sessionData])

	useEffect(() => {
		if(conversationData?._id){
			const consumerData = collect(conversationData?.participants).firstWhere('role', 'consumer')

			if(consumerData?.id){
				setToParticipant({
					id: consumerData.id,
					name: consumerData.name,
					role: 'consumer',
				})
			}else{
				setToParticipant(null)
			}
		}
	}, [conversationData])

	const handleSendMessage = async (e) => {
		e.preventDefault()

		if(!conversationId){
			alert("Invalid Conversation Data Loaded.");
			return false
		}

		if(!fromParticipant?.id || !toParticipant?.id){
			alert("Invalid from participant and to participant object detected.");
			return false
		}

		await createConversationMessage({
			workspaceId,
			channelId,
			conversationId,
			message: {
				"sourceMid": getAutoGeneratedAgentSourceMid(),
				"messageType": messageType,
				"content": messageText,
				"from": fromParticipant,
				"to": toParticipant,
				"threadId": activeThreadId,
				"createdTime": generateTimestamp(),
				"isAgentReplied": true,
				"iceFeedback": false
			}
		})

		setMessageText(null)
	}

	const handleKeyDown = (e) => {
		// Check if the Ctrl key is pressed and the Enter key is also pressed
		if (e.key === 'Enter') {
			// Insert a newline character into the textarea
			setMessageText((prevMessage) => prevMessage + '\n');
		} else if (e.ctrlKey && e.key === 'Enter') {
			// Prevent the default behavior of Enter key (form submission)
			e.preventDefault();
			// Call the handleSendMessage function to submit the form
			handleSendMessage(e);
		}
	};

	return (
		<div className={`bg-white w-full`}>

			{ threadIsClosed && (
				<div className={`bg-white w-full`}>
					<AlertError message={`Thread is Closed`} />
				</div>
			)}

			{
				!isOnlyQCManager && !threadIsClosed && fromParticipant?.id && toParticipant?.id && (
					<form onSubmit={handleSendMessage}>
						<div className="overflow-hidden border border-gray-300 shadow-md">
							<label htmlFor="description" className="sr-only">
								Write your message
							</label>

							<AutoGrowTextarea
								id="message"
								name="message"
								value={messageText || ''}
								minRows={1}
								maxRows={20}
								className="block w-full pt-2 resize-none border-0 py-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
								placeholder="Write a description..."
								onChange={setMessageText}
								onKeyDown={handleKeyDown}
								required={true}
							/>

							{/* Spacer element to match the height of the toolbar */}
							<div aria-hidden="true">
								<div className="py-2">
									<div className="h-4" />
								</div>
								<div className="h-px" />
								<div className="py-2">
									<div className="py-px">
										<div className="h-4" />
									</div>
								</div>
							</div>
						</div>

						<div className="absolute inset-x-px bottom-0">
							<div className="flex items-center justify-between space-x-3 border-t border-gray-200 px-2 py-2 sm:px-3">
								<div className="flex">
									<button
										type="button"
										className="group -my-2 -ml-2 inline-flex items-center rounded-full px-3 py-2 text-left text-gray-400"
									>
										<PaperClipIcon className="-ml-1 mr-2 h-5 w-5 group-hover:text-gray-500" aria-hidden="true" />
										<span className="text-sm italic text-gray-500 group-hover:text-gray-600">Attach a file</span>
									</button>
								</div>
								<div className="flex-shrink-0 ">
									<button
										type={conversationMessageIsCreating ? 'button' : 'submit'}
										className={classNames(
											"inline-flex gap-x-2 items-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600",
											conversationMessageIsCreating && "animate-pulse",
										)}
									>
										{conversationMessageIsCreating ? "Sending ..." : "Send Message"}
										<MdSend className={`h-5 w-5`} />
									</button>
								</div>
							</div>
						</div>
					</form>
				)
			}

			<MessengerChatCommandPallet chatWindowData={chatWindowData}/>
			
		</div>
	)
}



export function getAutoGeneratedAgentSourceMid() {
	const prefix = 'AGENT_REPLAY_';
	const timestamp = Date.now().toString();
	const randomId = Math.floor(Math.random() * 1000); // Add a random ID to ensure uniqueness

	return `${prefix}${timestamp}_${randomId}`;
}

export function getAutoGeneratedSourceMid(prefix = '') {
	const timestamp = Date.now().toString();
	const randomId = Math.floor(Math.random() * 1000); // Add a random ID to ensure uniqueness

	return `${prefix}${timestamp}_${randomId}`;
}