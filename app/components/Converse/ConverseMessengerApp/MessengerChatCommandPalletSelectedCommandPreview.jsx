import AskToConfirm from "@/components/ui/AskToConfirm";
import {useEffect, useState} from "react";
import ConversationThreadClosingNoteForm
	from "@/components/Converse/ConverseMessengerApp/ConversationThreadClosingNoteForm";
import TaskInfoComponent from "@/components/Converse/Tasks/TaskInfoComponent";
import {
	useCreateConversationMessageMutation,
	useGetConversationByIdQuery
} from "@/store/features/messenger/MessengerAPISlice";
import LoadingCircle from "@/components/ui/loading/LoadingCircle";
import Dump from "@/components/Dump";
import {useSession} from "next-auth/react";
import collect from "collect.js";
import {CheckCircleIcon} from "@heroicons/react/20/solid";
import {useDispatch} from "react-redux";
import {inActivateChatCommand} from "@/store/features/messenger/MessengerInstanceSlice";
import {generateTimestamp} from "@/utils/helperFunctions";
import {getAutoGeneratedAgentSourceMid} from "@/components/Converse/ConverseMessengerApp/MessengerReplayForm";

export default function MessengerChatCommandPalletSelectedCommandPreview({ chatWindowData, selectedCommand }){

	const {
		workspaceId,
		channelId,
		conversationId,
		activeThreadId,
		agentId
	} = chatWindowData

	function onTaskInfoClose(){

	}

	let selectedCommandPreview = ''
	switch (selectedCommand?.command) {
		case "/close-thread":
			selectedCommandPreview = <CloseThreadCommandView selectedCommand={selectedCommand} />
			break

		case "/send-ice-message":
			selectedCommandPreview = <SendIceMessageCommandView
				chatWindowData={chatWindowData}
			/>
			break

		case "/forward-to-an-agent":
			selectedCommandPreview = <TaskInfoComponent
				thread_id={activeThreadId}
				workspace_id={workspaceId}
				onTaskInfoClose={onTaskInfoClose}
			/>
			break

		default:
			return <DefaultSelectedCommandPreview selectedCommand={selectedCommand} />
	}

	return selectedCommandPreview
}


function CloseThreadCommandView({ selectedCommand }) {
	const [confirmThreadClose, setConfirmThreadClose] = useState(false)

	return (
		<div className="p-6">
			<div className="mt-4">
				{ ! confirmThreadClose && <AskToConfirm
					message={`Are you sure you want to close the running thread conversation?`}
					onConfirm={setConfirmThreadClose}
				/> }

				{
					confirmThreadClose === true && <ConversationThreadClosingNoteForm />
				}

			</div>
		</div>
	)
}

function ServiceFeedbackMessageSentContent() {
	const dispatch = useDispatch()

	const [showGoBackButton, setShowGoBackButton] = useState(false);

	useEffect(() => {
		// Set a timer to show the "Go Back" button after 5 seconds
		const timer = setTimeout(() => {
			dispatch(inActivateChatCommand());
		}, 3000);

		// Clean up the timer when the component is unmounted
		return () => {
			clearTimeout(timer);
		};
	}, [dispatch]);

	return (
		<div className={`flex items-center gap-x-4`}>
			<CheckCircleIcon className={`w-5 h-5 text-green-600`} />
			<span>Service Feedback Message sent to the Consumer</span>
		</div>
	);
}

function SendIceMessageView({ chatWindowData, fromParticipant, toParticipant }) {
	const {
		workspaceId,
		channelId,
		conversationId,
		activeThreadId,
		agentId
	} = chatWindowData

	const [sendIceMessage, {
		isLoading: IceMessageSendIsLading,
		isSuccess: IceMessageSendIsSuccess,
		data: IceMessageSendData,
		error: IceMessageSendError
	}] = useCreateConversationMessageMutation()


	useEffect(() => {
		sendIceMessage({
			workspaceId,
			channelId,
			conversationId,
			message: {
				"sourceMid": getAutoGeneratedAgentSourceMid(),
				"messageType": 'iceFeedback',
				"content": 'iceFeedback',
				"from": fromParticipant,
				"to": toParticipant,
				"threadId": activeThreadId,
				"createdTime": generateTimestamp(),
				"isAgentReplied": true,
				"iceFeedback": true
			}
		})
	}, [])

	return (
		<>
			{ IceMessageSendIsLading && (<div className={`flex items-center gap-x-4`}>
				<LoadingCircle size={8} />
				<span>Sending Ice Message to the consumer...</span>
			</div>)}

			{ !IceMessageSendIsLading && IceMessageSendError && (<Dump data={{IceMessageSendError}} />)}

			{ !IceMessageSendIsLading && !IceMessageSendError && IceMessageSendIsSuccess && IceMessageSendData && (
				<ServiceFeedbackMessageSentContent />
			)}
		</>
	);
}

function SendIceMessageCommandView({ chatWindowData }) {
	const [confirmIceMessageSend, setConfirmIceMessageSend] = useState(false)

	const session = useSession()
	const sessionData = session?.data

	const [fromParticipant, setFromParticipant] = useState(null)
	const [toParticipant, setToParticipant] = useState(null)
	const [messageText, setMessageText] = useState('')
	const [messageType, setMessageType] = useState('iceFeedback')

	const {
		workspaceId,
		channelId,
		conversationId,
		activeThreadId,
		activityTab,
		userActivityType
	} = chatWindowData

	const {
		data: conversationData,
	} = useGetConversationByIdQuery({
		workspaceId,
		channelId,
		conversationId
	}, { skip: !workspaceId || !channelId || !conversationId })

	useEffect(() => {
		if(sessionData?.user){
			setFromParticipant({
				id: sessionData.user.id,
				name: sessionData.user.name,
				role: 'agent',
			})
		}else{
			setFromParticipant(null)
		}
	}, [sessionData])

	useEffect(() => {
		if(conversationData?._id){
			const consumerData = collect(conversationData?.participants).firstWhere('role', 'consumer')

			if(consumerData?.id){
				setToParticipant({
					id: consumerData.id,
					name: consumerData.name,
					role: 'consumer',
				})
			}else{
				setToParticipant(null)
			}
		}
	}, [conversationData])

	return (
		<div className="p-6">
			<div className="mt-4">
				{ ! confirmIceMessageSend && <AskToConfirm
					message={`Are you sure to send ICE message to the Consumer?`}
					onConfirm={setConfirmIceMessageSend}
				/> }

				{
					confirmIceMessageSend && fromParticipant?.id > 0 && toParticipant?.id > 0 &&
					(<SendIceMessageView
						fromParticipant={fromParticipant}
						toParticipant={toParticipant}
						chatWindowData={chatWindowData} />)
				}
			</div>
		</div>
	)
}

function DefaultSelectedCommandPreview({ selectedCommand }) {
	return (
		<div className="px-6 py-14 text-center sm:px-14">
			<selectedCommand.icon
				className={`mx-auto h-6 w-6 text-gray-900 text-opacity-40`}
				aria-hidden="true"
			/>

			<p className="mt-4 text-sm text-gray-900">
				Coming Soon.
			</p>
		</div>
	)
}